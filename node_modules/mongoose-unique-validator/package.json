{
  "_args": [
    [
      {
        "raw": "mongoose-unique-validator",
        "scope": null,
        "escapedName": "mongoose-unique-validator",
        "name": "mongoose-unique-validator",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/aditya/WebstormProjects/Nemesis-dbt_web"
    ]
  ],
  "_from": "mongoose-unique-validator@latest",
  "_id": "mongoose-unique-validator@2.0.1",
  "_inCache": true,
  "_location": "/mongoose-unique-validator",
  "_nodeVersion": "9.11.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/mongoose-unique-validator_2.0.1_1524839335558_0.004869501252483088"
  },
  "_npmUser": {
    "name": "viveleroi",
    "email": "botsko@gmail.com"
  },
  "_npmVersion": "6.0.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "mongoose-unique-validator",
    "scope": null,
    "escapedName": "mongoose-unique-validator",
    "name": "mongoose-unique-validator",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/mongoose-unique-validator/-/mongoose-unique-validator-2.0.1.tgz",
  "_shasum": "34c64f097cb5e1c61f822116b0a5b07667e6de92",
  "_shrinkwrap": null,
  "_spec": "mongoose-unique-validator",
  "_where": "/home/aditya/WebstormProjects/Nemesis-dbt_web",
  "author": {
    "name": "Blake Haswell",
    "email": "haswell00@gmail.com",
    "url": "http://blakehaswell.com/"
  },
  "bugs": {
    "url": "https://github.com/blakehaswell/mongoose-unique-validator/issues"
  },
  "contributors": [
    {
      "name": "Mike Botsko",
      "email": "botsko@gmail.com"
    }
  ],
  "dependencies": {
    "lodash.foreach": "^4.1.0",
    "lodash.get": "^4.0.2"
  },
  "description": "mongoose-unique-validator is a plugin which adds pre-save validation for unique fields within a Mongoose schema.",
  "devDependencies": {
    "bluebird": "^3.5.1",
    "chai": "^4.1.2",
    "eslint": "^4.16.0",
    "mocha": "^5.0.0",
    "mongoose": "^5.0.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-Eqq7lZMy0nPSojG8UyDZvlBie1aBZJXk68GDMBXXQH0TAi0hZHf76nCrwuipReNK1jLkjyKzV7eIZotja5eEBw==",
    "shasum": "34c64f097cb5e1c61f822116b0a5b07667e6de92",
    "tarball": "https://registry.npmjs.org/mongoose-unique-validator/-/mongoose-unique-validator-2.0.1.tgz",
    "fileCount": 14,
    "unpackedSize": 78201,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa4zOoCRA9TVsSAnZWagAArBMP/iPa87wpzbff3/pLtWwZ\nw+4bvve79IG9xr7F1sFkaGbCZhzzVgQyhfTLoSYfXRgO8EIAVibx9MibgzWq\n1+G3peVgEbiFBr8a42Jbuy0MXCLfsfDSsWiOJt+HT5wcxgV1trLYjIhcbkHV\n+O+dy00WOq7wggpH35mpEmJ243IIJ7P0FXMIuoVb6La6+zq1xGBYBt1BjPKL\nclQxECaMr+5nwekLUa4s1Q/T7tgPXDh5inbWdyzJbv/JmQs/w0SvPmOhEaft\n+ZMpFMMxy/9hE9o8ejiLbmG0C7558F7bP7Qs1r1cfRWDGggaMJJNNWouDa6h\nnj3ZzouYlCmP8rvg2jT7L8+Fs9ERe/Tc+1bUB4keqOchzSmHiVi5znPV7WQd\nRUC6FyFgxmwao4tQ5x1wv3yNd4noZjurSasCuP43k43CR9D9Ik1EVV1PKyJ5\nHNhHnaDwe5amiiDmSJzHvtYmgWP9458gCpPYKO4D7krUsYfvVJiDIM+kAf+1\nhXuYbpTgyItgMwdM24AQW2MagojaQQc0vWgukus3r2eTGGuz2gpOBQ0ggepe\n3I/I6+1aog8yY/PJW5IH57KQtYTwoPnRr3FMNdt5YVWPXZTEeHPNV4RutI79\ndvl9zR/DWc71sFJn/JYfw6tMtGpN1ZN+VK1Pzwo/nB6iTmKcSt08al9Q2Ba5\nEkKl\r\n=y+FU\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "dbaad90668155c65dea5b1dc4a4f4993f94e1f89",
  "homepage": "https://github.com/blakehaswell/mongoose-unique-validator#readme",
  "keywords": [
    "mongoose",
    "unique",
    "validator"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "blakehaswell",
      "email": "haswell00@gmail.com"
    },
    {
      "name": "viveleroi",
      "email": "botsko@gmail.com"
    }
  ],
  "name": "mongoose-unique-validator",
  "optionalDependencies": {},
  "peerDependencies": {
    "mongoose": "^5.0.0"
  },
  "readme": "mongoose-unique-validator\n=========================\n\n[![Build Status](https://travis-ci.org/blakehaswell/mongoose-unique-validator.svg)](https://travis-ci.org/blakehaswell/mongoose-unique-validator)\n\nmongoose-unique-validator is a plugin which adds pre-save validation for unique fields within a Mongoose schema.\n\nThis makes error handling much easier, since you will get a Mongoose validation error when you attempt to violate a\n[unique constraint](http://mongoosejs.com/docs/api.html#schematype_SchemaType-unique), rather than an E11000 error\nfrom MongoDB.\n\nUsage\n-----\n\nYarn: `yarn add mongoose-unique-validator`\n\nNPM: `npm install --save mongoose-unique-validator`\n\nThen, apply the plugin to your schema:\n\n```js\nvar mongoose = require('mongoose');\nvar uniqueValidator = require('mongoose-unique-validator');\n\nvar mySchema = mongoose.Schema(/* put your schema definition here */);\nmySchema.plugin(uniqueValidator);\n```\n\nExample\n-------\n\nLetâ€™s say you have a user schema. You can easily add validation for the unique constraints in this schema by applying\nthe `uniqueValidator` plugin to your user schema:\n\n```js\nvar mongoose = require('mongoose');\nvar uniqueValidator = require('mongoose-unique-validator');\n\n// Define your schema as normal.\nvar userSchema = mongoose.Schema({\n    username: { type: String, required: true, unique: true },\n    email: { type: String, index: true, unique: true, required: true },\n    password: { type: String, required: true }\n});\n\n// Apply the uniqueValidator plugin to userSchema.\nuserSchema.plugin(uniqueValidator);\n```\n\nNow when you try to save a user, the unique validator will check for duplicate database entries and report them just\nlike any other validation error:\n\n```js\nvar user = new User({ username: 'JohnSmith', email: 'john.smith@gmail.com', password: 'j0hnNYb0i' });\nuser.save(function (err) {\n    console.log(err);\n});\n```\n\n```js\n{\n    message: 'Validation failed',\n    name: 'ValidationError',\n    errors: {\n        username: {\n            message: 'Error, expected `username` to be unique. Value: `JohnSmith`',\n            name: 'ValidatorError',\n            kind: 'unique',\n            path: 'username',\n            value: 'JohnSmith'\n        }\n    }\n}\n```\n\nFind + Updates\n--------------\n\nWhen using `findOneAndUpdate` and related methods, mongoose doesn't automatically run validation. To trigger this,\nyou need to pass a configuration object. For technical reasons, this plugin requires that you also set the context\noption to `query`.\n\n`{ runValidators: true, context: 'query' }`\n\nA full example:\n\n```js\nUser.findOneAndUpdate(\n    { email: 'old-email@example.com' },\n    { email: 'new-email@example.com' },\n    { runValidators: true, context: 'query' },\n    function(err) {\n        // ...\n    }\n)\n```\n\nCustom Error Types\n------------------\n\nYou can pass through a custom error type as part of the optional `options` argument:\n\n```js\nuserSchema.plugin(uniqueValidator, { type: 'mongoose-unique-validator' });\n```\n\nAfter running the above example the output will be:\n\n```js\n{\n    message: 'Validation failed',\n    name: 'ValidationError',\n    errors: {\n        username: {\n            message: 'Error, expected `username` to be unique. Value: `JohnSmith`',\n            name: 'ValidatorError',\n            kind: 'mongoose-unique-validator',\n            path: 'username',\n            value: 'JohnSmith'\n        }\n    }\n}\n```\n\nCustom Error Messages\n---------------------\n\nYou can pass through a custom error message as part of the optional `options` argument:\n\n```js\nuserSchema.plugin(uniqueValidator, { message: 'Error, expected {PATH} to be unique.' });\n```\n\nYou have access to all of the standard Mongoose error message templating:\n\n*   `{PATH}`\n*   `{VALUE}`\n*   `{TYPE}`\n\n\nCase Insensitive\n---------------------\n\nFor case-insensitive matches, include the `uniqueCaseInsensitive` option in your schema. Queries will treat `john.smith@gmail.com` and `John.Smith@gmail.com` as duplicates.\n\n```js\nvar userSchema = mongoose.Schema({\n    username: { type: String, required: true, unique: true },\n    email: { type: String, index: true, unique: true, required: true, uniqueCaseInsensitive: true },\n    password: { type: String, required: true }\n});\n```\n\n\nCaveats\n-------\n\nBecause we rely on async operations to verify whether a document exists in the database, it's possible for two queries to execute at the same time, both get 0 back, and then both insert into MongoDB.\n\nOutside of automatically locking the collection or forcing a single connection, there's no real solution.\n\nFor most of our users this won't be a problem, but is an edge case to be aware of.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/blakehaswell/mongoose-unique-validator.git"
  },
  "scripts": {
    "lint": "eslint index.js test",
    "test": "mocha test --exit && ./node_modules/eslint/bin/eslint.js index.js test"
  },
  "version": "2.0.1"
}
