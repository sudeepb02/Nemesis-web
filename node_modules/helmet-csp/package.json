{
  "_args": [
    [
      {
        "raw": "helmet-csp@2.7.1",
        "scope": null,
        "escapedName": "helmet-csp",
        "name": "helmet-csp",
        "rawSpec": "2.7.1",
        "spec": "2.7.1",
        "type": "version"
      },
      "/home/aditya/WebstormProjects/Nemesis-dbt_web/node_modules/helmet"
    ]
  ],
  "_from": "helmet-csp@2.7.1",
  "_id": "helmet-csp@2.7.1",
  "_inCache": true,
  "_location": "/helmet-csp",
  "_nodeVersion": "10.5.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/helmet-csp_2.7.1_1532118830676_0.2757220233905715"
  },
  "_npmUser": {
    "name": "evanhahn",
    "email": "me@evanhahn.com"
  },
  "_npmVersion": "6.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "helmet-csp@2.7.1",
    "scope": null,
    "escapedName": "helmet-csp",
    "name": "helmet-csp",
    "rawSpec": "2.7.1",
    "spec": "2.7.1",
    "type": "version"
  },
  "_requiredBy": [
    "/helmet"
  ],
  "_resolved": "https://registry.npmjs.org/helmet-csp/-/helmet-csp-2.7.1.tgz",
  "_shasum": "e8e0b5186ffd4db625cfcce523758adbfadb9dca",
  "_shrinkwrap": null,
  "_spec": "helmet-csp@2.7.1",
  "_where": "/home/aditya/WebstormProjects/Nemesis-dbt_web/node_modules/helmet",
  "author": {
    "name": "Adam Baldwin",
    "email": "baldwin@andyet.net",
    "url": "http://andyet.net/team/baldwin"
  },
  "bugs": {
    "url": "https://github.com/helmetjs/csp/issues"
  },
  "contributors": [
    {
      "name": "Evan Hahn",
      "email": "me@evanhahn.com",
      "url": "https://evanhahn.com"
    },
    {
      "name": "Ryan Cannon",
      "email": "ryan@ryancannon.com",
      "url": "https://ryancannon.com"
    }
  ],
  "dependencies": {
    "camelize": "1.0.0",
    "content-security-policy-builder": "2.0.0",
    "dasherize": "2.0.0",
    "platform": "1.3.5"
  },
  "description": "Content Security Policy middleware.",
  "devDependencies": {
    "content-security-policy-parser": "^0.1.1",
    "express": "^4.16.3",
    "lodash": "^4.17.10",
    "mocha": "^5.2.0",
    "standard": "^11.0.1",
    "supertest": "^3.1.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-sCHwywg4daQ2mY0YYwXSZRsgcCeerUwxMwNixGA7aMLkVmPTYBl7gJoZDHOZyXkqPrtuDT3s2B1A+RLI7WxSdQ==",
    "shasum": "e8e0b5186ffd4db625cfcce523758adbfadb9dca",
    "tarball": "https://registry.npmjs.org/helmet-csp/-/helmet-csp-2.7.1.tgz",
    "fileCount": 20,
    "unpackedSize": 24588,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbUkcuCRA9TVsSAnZWagAAMpkP/jGWI9/c5mDrE40MQeO8\nCcnjhks0SsCCvnhDNggmFW8TNB/uHtNMklDx32M3lKV3fZKBeA8TAXwh0y1I\nLooWC1niKdvmLts6AG+8hk6uZk2HWwQz8wTHTaEZUCdP6hOfK7eMsJSD7SAS\nWhJ8qZnAjFvGyqr/Ni5SJ8OUWKF1je9K9WIozlej7kaFhGlLl0JCHRns/Kiq\n2u+2bMQdKRYHFnJbfztJrvQenoYNpiYP1bNdamXIJ7K6veCantLrYw/f33R4\n2TR3rQb29WGknKkfIH6+szoGz1ruaZjD311u8UXWVIQv/10aaP8sBEQQjj3Y\n2QHV5lB9JAfXXqG8ny5KKpcGAnstDnQUBPNuNFN4I4GLAe4oO4wrYfo1Gy5S\nYsTQwKf2EuMOhsgvAv6fkD+kRCneuXA248b5GS37y6miZxgxJjxgZKbS01CF\n/xfoC9ykto2pp30UVwwFvtbZHwlS5pTyZu/daFaQXj9NYevIEiHAliNJ9omX\nc+90SD2dsSMtTqZkzJI6fkunpgWWkv4r2JC2px0NknzVGAw2WdOe74HFRAok\nrTy2ozagrqef05k5RpjMLvEM3oRI13IX63f1R0Zb0enL3ua23lCqNg7xFmxX\nbBHQIrjQrr0esPZq6MJYI/x9GX9rKs+7UsOtU5DngnEUZnZdnu/mtwGIc9fx\n2tUx\r\n=UGEX\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "4880b53cb58d46dbdf09d01b9293e5365694f8b7",
  "homepage": "https://github.com/helmetjs/csp#readme",
  "keywords": [
    "helmet",
    "security",
    "express",
    "connect",
    "content",
    "security",
    "policy",
    "csp",
    "xss"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "evanhahn",
      "email": "me@evanhahn.com"
    }
  ],
  "name": "helmet-csp",
  "optionalDependencies": {},
  "readme": "Content Security Policy middleware\n==================================\n[![Build Status](https://travis-ci.org/helmetjs/csp.svg?branch=master)](https://travis-ci.org/helmetjs/csp)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](http://standardjs.com/)\n\n[_Looking for a changelog?_](https://github.com/helmetjs/helmet/blob/master/HISTORY.md)\n\nContent Security Policy helps prevent unwanted content being injected into your webpages; this can mitigate cross-site scripting (XSS) vulnerabilities, malicious frames, unwanted trackers, and more. If you want to learn how CSP works, check out the fantastic [HTML5 Rocks guide](http://www.html5rocks.com/en/tutorials/security/content-security-policy/), the [Content Security Policy Reference](http://content-security-policy.com/), and the [Content Security Policy specification](http://www.w3.org/TR/CSP/). This module helps set Content Security Policies.\n\nUsage:\n\n```javascript\nvar csp = require('helmet-csp')\n\napp.use(csp({\n  // Specify directives as normal.\n  directives: {\n    defaultSrc: [\"'self'\", 'default.com'],\n    scriptSrc: [\"'self'\", \"'unsafe-inline'\"],\n    styleSrc: ['style.com'],\n    fontSrc: [\"'self'\", 'fonts.com'],\n    imgSrc: ['img.com', 'data:'],\n    sandbox: ['allow-forms', 'allow-scripts'],\n    reportUri: '/report-violation',\n    objectSrc: [\"'none'\"],\n    upgradeInsecureRequests: true,\n    workerSrc: false  // This is not set.\n  },\n\n  // This module will detect common mistakes in your directives and throw errors\n  // if it finds any. To disable this, enable \"loose mode\".\n  loose: false,\n\n  // Set to true if you only want browsers to report errors, not block them.\n  // You may also set this to a function(req, res) in order to decide dynamically\n  // whether to use reportOnly mode, e.g., to allow for a dynamic kill switch.\n  reportOnly: false,\n\n  // Set to true if you want to blindly set all headers: Content-Security-Policy,\n  // X-WebKit-CSP, and X-Content-Security-Policy.\n  setAllHeaders: false,\n\n  // Set to true if you want to disable CSP on Android where it can be buggy.\n  disableAndroid: false,\n\n  // Set to false if you want to completely disable any user-agent sniffing.\n  // This may make the headers less compatible but it will be much faster.\n  // This defaults to `true`.\n  browserSniff: true\n}))\n```\n\nThere are a lot of inconsistencies in how browsers implement CSP. Helmet looks at the user-agent of the browser and sets the appropriate header and value for that browser. If no user-agent is matched, it will set _all_ the headers with the 2.0 spec.\n\nSupported directives\n--------------------\n\nDirectives can be kebab-cased (like `script-src`) or camel-cased (like `scriptSrc`); they are equivalent.\n\nThe following directives are supported:\n\n* `base-uri` or `baseUri`\n* `block-all-mixed-content` or `blockAllMixedContent`\n* `child-src` or `childSrc`\n* `connect-src` or `connectSrc`\n* `default-src` or `defaultSrc`\n* `font-src` or `fontSrc`\n* `form-action` or `formAction`\n* `frame-ancestors` or `frameAncestors`\n* `frame-src` or `frameSrc`\n* `img-src` or `imgSrc`\n* `manifest-src` or `manifestSrc`\n* `media-src` or `mediaSrc`\n* `object-src` or `objectSrc`\n* `plugin-types` or `pluginTypes`\n* `prefetch-src` or `prefetchSrc`\n* `report-to` or `reportTo`\n* `report-uri` or `reportUri`\n* `require-sri-for` or `requireSriFor`\n* `sandbox` or `sandbox`\n* `script-src` or `scriptSrc`\n* `style-src` or `styleSrc`\n* `upgrade-insecure-requests` or `upgradeInsecureRequests`\n* `worker-src` or `workerSrc`\n\nHandling CSP violations\n-----------------------\n\nIf you've specified a `reportUri`, browsers will POST any CSP violations to your server. Here's a simple example of a route that handles those reports:\n\n```js\n// You need a JSON parser first.\napp.use(bodyParser.json({\n  type: ['json', 'application/csp-report']\n}))\n\napp.post('/report-violation', function (req, res) {\n  if (req.body) {\n    console.log('CSP Violation: ', req.body)\n  } else {\n    console.log('CSP Violation: No data received!')\n  }\n  res.status(204).end()\n})\n```\n\nNot all browsers send CSP violations in the same way, so this might require a little work.\n\n*Note*: If you're using a CSRF module like [csurf](https://github.com/expressjs/csurf), you might have problems handling these violations without a valid CSRF token. The fix is to put your CSP report route *above* csurf middleware.\n\nGenerating nonces\n-----------------\n\nYou can dynamically generate nonces to allow inline `<script>` tags to be safely evaluated. Here's a simple example:\n\n```js\nvar uuidv4 = require('uuid/v4')\n\napp.use(function (req, res, next) {\n  res.locals.nonce = uuidv4()\n  next()\n})\n\napp.use(csp({\n  directives: {\n    scriptSrc: [\n      \"'self'\",\n      function (req, res) {\n        return \"'nonce-\" + res.locals.nonce + \"'\"  // 'nonce-614d9122-d5b0-4760-aecf-3a5d17cf0ac9'\n      }\n    ]\n  }\n}))\n\napp.use(function (req, res) {\n  res.end('<script nonce=\"' + res.locals.nonce + '\">alert(1 + 1);</script>')\n})\n```\n\nUsing CSP with a CDN\n--------------------\n\nThe default behavior of CSP is generate headers tailored for the browser that's requesting your page. If you have a CDN in front of your application, the CDN may cache the wrong headers, rendering your CSP useless. Make sure to eschew a CDN when using this module or set the `browserSniff` option to `false`.\n\nSee also\n--------\n\n* [GitHub's CSP journey](http://githubengineering.com/githubs-csp-journey/)\n* [Content Security Policy for Single Page Web Apps](https://corner.squareup.com/2016/05/content-security-policy-single-page-app.html)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/helmetjs/csp.git"
  },
  "scripts": {
    "generate-supported-directives-docs": "./scripts/generate_supported_directives_docs",
    "pretest": "standard --fix",
    "test": "mocha"
  },
  "standard": {
    "globals": [
      "describe",
      "beforeEach",
      "it"
    ]
  },
  "version": "2.7.1"
}
